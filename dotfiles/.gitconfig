[core]
  whitespace = fix,-indent-with-non-tab,trailing-space,cr-at-eol
  editor = nvim
  excludesfile = ~/.gitignore_global
  ignoreCase = true
  pager = delta
  attributesfile = ~/.gitattributes
[include]
  path = .gitconfig_local
[branch]
  autosetuprebase = always
[push]
  default = simple
  autoSetupRemote = true
[filter "hawser"]
  clean = git hawser clean %f
  smudge = git hawser smudge %f
  required = true
[filter "lfs"]
  clean = git-lfs clean -- %f
  smudge = git-lfs smudge -- %f
  process = git-lfs filter-process
  required = true
[fetch]
  prune = true
[rebase]
  autosquash = true
[commit]
  verbose = true
[merge]
  ff = false
  # conflictstyle = diff3
  conflictStyle = zdiff3
  tool = smerge
[color]
  ui = true
[color "branch"]
  current = yellow reverse
  local = yellow
  remote = green
[color "diff"]
  meta = yellow bold
  frag = magenta bold
  old = red bold
  new = green bold
  whitespace = red reverse
[color "status"]
  added = yellow
  changed = green
  untracked = cyan
[pull]
  rebase = true
[init]
  defaultBranch = main
[blame]
  ignoreRevsFile = .git-blame-ignore-revs
  markIgnoredLines = true
  markUnblamableLines = true
[interactive]
  # diffFilter = diff-so-fancy --patch
  diffFilter = delta --color-only
[delta]
  blame-code-style = "syntax"
  blame-palette = "#1a1a1a #222222 #2a2a2a #323232"
  dark = true
  file-added-label = "[+]"
  file-copied-label = "[==]"
  file-decoration-style = "none"
  file-modified-label = "[*]"
  file-removed-label = "[-]"
  file-renamed-label = "[->]"
  file-style = "bold #f59e0b"
  file-transformation = "s|^.*/||"    # show only filename, not full path
  grep-match-line-style = "syntax #1a3547"
  grep-match-word-style = "black #99ccff"
  hunk-header-decoration-style = "#2a4158 box ul"
  hunk-header-style = "bold #6b7280 line-number"
  hyperlinks = true
  hyperlinks-commit-link-format = "https://github.com/{path}/commit/{commit}"
  hyperlinks-file-link-format = "vscode://file/{path}:{line}"
  keep-plus-minus-markers = false    # show +/- markers for clarity
  light = false      # set to true for terminals with light background colors (e.g. the default macOS terminal)
  line-numbers = true
  line-numbers-left-style = "#6b7280"
  line-numbers-minus-style = "#dc2626"
  line-numbers-plus-style = "#3b82f6"
  line-numbers-right-style = "#6b7280"
  line-numbers-zero-style = "#4b5563"
  max-line-distance = 0.6    # smarter line matching
  max-line-length = 512    # prevent very long lines from breaking layout
  merge-conflict-begin-symbol = "â–¼"
  merge-conflict-end-symbol = "â–²"
  merge-conflict-ours-diff-header-decoration-style = "#2a4158 box"
  merge-conflict-ours-diff-header-style = "brightcyan bold"
  merge-conflict-theirs-diff-header-decoration-style = "#4a2c2a box"
  merge-conflict-theirs-diff-header-style = "brightmagenta bold"
  minus-emph-style = "white bold #cc5555"
  minus-style = "white #a64040"
  navigate = true    # use n and N to move between diff sections
  plus-emph-style = "white bold #5599cc"
  plus-style = "white #4078a6"
  side-by-side = true
  syntax-theme = "base16-256"
  tabs = 2    # consistent tab display
  true-color = always
  whitespace-error-style = "bold #dc2626 reverse"
  # word-diff-regex = "\\w+|[^\\w\\s]+"    # better word-level highlighting
  wrap-max-lines = unlimited    # don't truncate long diffs
  zero-style = "syntax"
[split-diffs]
  theme-directory = /Users/kud/my/themes/split-diff
  theme-name = claude-code-colorblind
[diff]
  colorMoved = default
[diff "image"]
  command = ~/my/modules/git-diff-image/git_diff_image
[mergetool "smerge"]
  cmd = smerge mergetool \"$BASE\" \"$LOCAL\" \"$REMOTE\" -o \"$MERGED\"
  trustExitCode = true
[alias]
  aa = add -A
  aac = "!git add -A && git commit"
  add-plus = "!git ls-files -m -o --exclude-standard|fzf --print0 -m --preview-window right:75%  --preview 'git diff --color=always {}'|xargs -0 -t -o git add"
  ahead = "!git rev-list --left-right --count @{u}...HEAD 2>/dev/null || echo 'no upstream'"
  # aicommit = "!aicommits"
  aicommit = "!ai-conventional-commit --gitmoji"
  amend = commit --amend --no-edit
  apc = "!git add -p && git commit"
  blame-ignore = "!git blame -w --ignore-revs-file .git-blame-ignore-revs"
  br = branch
  branch-select-fzf = "!git checkout $(git branch | fzf)"
  branches = branch -avv
  branches-delete = branch-delete
  branchv = branch -v
  bs = branch-select
  ci = commit
  cleanup = "!git remote prune origin && git repack && git gc"
  co = checkout
  dc = diff --cached
  df = diff
  dfs = "!git diff --color \"$@\" | git-split-diffs --color"
  diff-image = "!f() { cd -- \"${GIT_PREFIX:-.}\"; GIT_DIFF_IMAGE_ENABLED=1 git diff \"$@\"; }; f"
  diff-so-fancy = "!git diff --color|diff-so-fancy"
  diff-split = "!git diff --color \"$@\" | git-split-diffs --color"
  diff-tastic = "-c diff.external=difft diff"
  export = "!git clone --depth 1 $1 && rm -rf \"$(basename $1 .git)/.git\" -"
  files-since-last = "!git diff --name-only $(git describe --tags --abbrev=0)..HEAD"
  fix = "!git add -A && git commit --amend --no-edit"
  gone = "!git fetch -p && git branch -vv | awk '/: gone]/{print $1}' | xargs -r git branch -D"
  graph = log --graph --decorate --oneline --abbrev-commit --all
  history = reflog --relative-date
  hotfix = "!git add -A && git commit -m 'ðŸš’'"
  ign = ls-files -o -i --exclude-standard
  last = log -1 HEAD
  last-files = diff --name-only HEAD~1
  lazy = "!lazygit"
  lg = log -p
  lga = log --graph --decorate --all --oneline
  lgb = log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit
  ll = log --oneline --decorate
  log-tastic = "-c diff.external=difft log --ext-diff"
  lol = log --graph --decorate --pretty=oneline --abbrev-commit
  lola = log --graph --decorate --pretty=oneline --abbrev-commit --all
  ls = ls-files
  open-modified = "!$EDITOR $(git status --porcelain | cut -c4-)"
  orphan = "!f() { [ -n \"$1\" ] || { echo 'branch name required' >&2; exit 1; }; git checkout --orphan \"$1\"; }; f"
  pick = cherry-pick
  polish = "!git add -A && git commit -m 'ðŸ’…'"
  prune-merged = "!git branch --merged | egrep -v '(^\\*|main|master|develop)' | xargs -r git branch -d"
  pt = "!git push && git push --tags"
  publish = "!git push -u origin HEAD"
  recommit = commit --amend
  reset-soft-last = reset --soft HEAD~1
  rmdf = "!git rm $(git ls-files --deleted)"
  root = rev-parse --show-toplevel
  show-commands = "!git config --get-regexp alias|sed \"s/alias.\\([a-zA-Z-]*\\) \\(\\.\\)*/$(tput setaf 2)\\1 $(tput setaf 0)\\2/\""
  show-tastic = "-c diff.external=difft show --ext-diff"
  since-last = "!git diff $(git describe --tags --abbrev=0)..HEAD"
  sm = switch-main
  smerge = "!'/Applications/Sublime Merge.app/Contents/SharedSupport/bin/smerge' ."
  st = status
  staged-files = diff --name-only --cached
  tag-current = "!git tag \"$@\" \"$(svu current)\""
  tag-major = "!git tag \"$@\" \"$(svu major)\""
  tag-minor = "!git tag \"$@\" \"$(svu minor)\""
  tag-next = "!git tag \"$@\" \"$(svu next)\""
  tag-patch = "!git tag \"$@\" \"$(svu patch)\""
  tags = tag -ln --sort=-creatordate
  tig = "!tig"
  today = "!git log --since=midnight --oneline --decorate"
  track = "!git branch --set-upstream-to=origin/$(git rev-parse --abbrev-ref HEAD)"
  trim = "!git reflog expire --all --expire=now && git gc --prune=now --aggressive"
  unadd = reset -p
  uncommit = undo
  undo-hard = reset --hard HEAD~1
  undo-soft = reset --soft HEAD~1
  unstage = reset HEAD --
  unstash = stash pop
  unwip = "!git reset --soft HEAD~1 && git unstage"
  who = shortlog -sn
  wip = "!git add -A && git commit -m 'ðŸš§ WIP'"
  word = diff --word-diff=color
  wt-list = worktree list
  wt-new = "!f() { [ -n \"$1\" ] || { echo 'worktree name required' >&2; exit 1; }; git worktree add ../$1 $1; }; f"
  wt-rm = "!f() { [ -n \"$1\" ] || { echo 'worktree name required' >&2; exit 1; }; git worktree remove ../$1; }; f"
