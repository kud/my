#! /usr/bin/env zsh

# find-all-dead-symlinks: List or delete broken symlinks safely.
#
#  Usage:
#    find-all-dead-symlinks [check|delete] [--depth=N]
#    find-all-dead-symlinks --help
#
#  Modes:
#    check   (default) Lists broken symlinks
#    delete  Prompts then deletes broken symlinks
#    --depth=N  Limit search to N levels (N >= 1)
#
#  Notes:
#    - Handles filenames with spaces/newlines via null-delimiters
#    - Avoids eval; builds find arguments array safely
#    - Exits 0 if no dead symlinks found
#
#  Examples:
#    find-all-dead-symlinks
#    find-all-dead-symlinks delete --depth=2
#    find-all-dead-symlinks check --depth=1

set -e

print_usage() {
  cat <<'EOF'
\n\e[1;36m🕵️  find-all-dead-symlinks\e[0m — Find (and optionally delete) broken symlinks.

Usage:
  find-all-dead-symlinks [check|delete] [--depth=N]
  find-all-dead-symlinks --help

Options:
  check        List broken symlinks (default)
  delete       Delete broken symlinks after confirmation
  --depth=N    Restrict recursion depth to N (>=1)
  -h, --help   Show this help

Examples:
  find-all-dead-symlinks
  find-all-dead-symlinks delete
  find-all-dead-symlinks check --depth=1
  find-all-dead-symlinks delete --depth=2
EOF
}

MODE=check
DEPTH=""

for arg in "$@"; do
  case "$arg" in
    check|delete)
      MODE="$arg" ;;
    --depth=*)
      DEPTH_VAL="${arg#--depth=}"
      if [[ ! "$DEPTH_VAL" =~ ^[0-9]+$ || "$DEPTH_VAL" -lt 1 ]]; then
        echo "Error: --depth requires a positive integer (>=1)" >&2
        exit 2
      fi
      DEPTH="$DEPTH_VAL" ;;
    -h|--help|help)
      print_usage
      exit 0 ;;
    *)
      echo "Error: Unknown argument: $arg" >&2
      echo "Use --help for usage." >&2
      exit 2 ;;
  esac
done

# Build find arguments safely
find_args=( . )
[[ -n $DEPTH ]] && find_args+=( -maxdepth "$DEPTH" )

# Collect dead symlinks (null-delimited for safety)
typeset -a dead_symlinks
while IFS= read -r -d '' link; do
  dead_symlinks+=("$link")
done < <(find "${find_args[@]}" -type l ! -exec test -e {} \; -print0 2>/dev/null)

if [[ "$MODE" == delete ]]; then
  if (( ${#dead_symlinks[@]} == 0 )); then
    echo "No broken symlinks to delete."
    exit 0
  fi

  echo "\033[1;31m⚠️  The following broken symlinks will be deleted:\033[0m"
  echo "------------------------------------------------------"
  for symlink in "${dead_symlinks[@]}"; do
    printf '  \033[1;33m%s\033[0m\n' "$symlink"
  done
  echo "------------------------------------------------------"
  echo
  read "?\033[1;31mPermanently delete these symlinks?\033[0m [y/N] " ans
  if [[ $ans == [yY]* ]]; then
    delete_errors=0
    for symlink in "${dead_symlinks[@]}"; do
      if ! rm -- "$symlink" 2>/dev/null; then
        echo "Failed to delete: $symlink" >&2
        delete_errors=1
      fi
    done
    if (( delete_errors )); then
      echo "\033[1;31mSome deletions failed.\033[0m" >&2
      exit 1
    fi
    echo "\033[1;32m✔ Broken symlinks deleted.\033[0m"
  else
    echo "\033[1;34mAborted.\033[0m"
  fi
  exit 0
fi

# MODE=check
if (( ${#dead_symlinks[@]} == 0 )); then
  echo "No broken symlinks found."
  exit 0
fi

echo "Listing broken symlinks in $(pwd):"
printf '%s\n' "${dead_symlinks[@]}"
