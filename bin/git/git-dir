#! /usr/bin/env zsh

# git-dir - Display the path to the .git directory
# 
# Usage:
#   git-dir                 # Display .git directory path
#   ls $(git-dir)/hooks     # List git hooks
#   git-dir --help          # Show help
#
# Examples:
#   git-dir                         # → /Users/kud/my/.git
#   ls $(git-dir)/hooks             # → list git hooks
#   cat $(git-dir)/config           # → show git config
#
# Returns:
#   - Absolute path to .git directory
#   - Empty output if not in a git repository
#   - Exit code 0 on success, 1 on error

# Help function
show_help() {
  cat << 'EOF'
git-dir - Display the path to the .git directory

USAGE:
  git-dir [--help]

DESCRIPTION:
  Shows the absolute path to the .git directory of the current repository.
  Useful for accessing git internals, hooks, or configuration files.

EXAMPLES:
  git-dir                         # → /Users/user/project/.git
  ls $(git-dir)/hooks             # List git hooks
  cat $(git-dir)/config           # Show git configuration
  open $(git-dir)                 # Open .git folder in Finder

EXIT CODES:
  0  Success - .git path displayed
  1  Error - not in git repository or other error

SEE ALSO:
  git rev-parse --git-dir
  git-root
EOF
}

# Check for help flag first
if [[ "$1" == "--help" || "$1" == "-h" ]]; then
  show_help
  exit 0
fi

# Get git directory using rev-parse --git-dir and resolve to absolute path
git_dir=$(git rev-parse --git-dir 2>/dev/null)

if [[ $? -eq 0 && -n "$git_dir" ]]; then
  # Convert to absolute path
  echo "${git_dir:A}"
  exit 0
else
  # Not in a git repository - exit silently with error code
  exit 1
fi
