#!/usr/bin/env zsh

# Lazy version bump + push helper
# Improves on original by:
# - validating input (patch|minor|major)
# - failing fast (set -euo pipefail)
# - collapsing two pushes into one (git push --follow-tags)
# - showing resulting version
# - guarding against missing package.json

set -euo pipefail

usage() {
  echo "Usage: git lazy-version {major|minor|patch}" >&2
  echo "Aliases: x=major, y=minor, z=patch" >&2
}

arg=${1:-}
case "$arg" in
  major|x)
    VERSION_TYPE=major ;;
  minor|y)
    VERSION_TYPE=minor ;;
  patch|z)
    VERSION_TYPE=patch ;;
  -h|--help|"")
    usage; exit 1 ;;
  *)
    echo "Error: version type must be one of: major minor patch (aliases: x y z)" >&2
    usage; exit 1 ;;
esac

if [[ ! -f package.json ]]; then
  echo "Error: package.json not found (run inside the project root)." >&2
  exit 1
fi

# Stage & AI commit current changes so that `npm version` finds a clean tree.
git add -A
if ! git aicommit; then
  echo "Error: git aicommit failed" >&2
  exit 1
fi

# Capture old version (best effort)
OLD_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "?")

# Perform bump (suppress noisy npm output) and read new version
npm version "$VERSION_TYPE" >/dev/null
NEW_VERSION=$(node -p "require('./package.json').version" 2>/dev/null || echo "?")

# Single push including tag
git push --follow-tags

# Fancy summary (TTY & colors if possible)
if [[ -t 1 && -z ${NO_COLOR:-} ]]; then
  B=$'\e[1m'; R=$'\e[0m'; G=$'\e[32m'; Y=$'\e[33m'; C=$'\e[36m'; M=$'\e[35m'; GRY=$'\e[90m'
else
  B=""; R=""; G=""; Y=""; C=""; M=""; GRY=""
fi

strip_ansi() {
  printf '%s' "$1" | sed -E $'s/\x1b\[[0-9;]*m//g'
}

# Lines (without the previous Next hint per user request)
SUMMARY="Version bump: $OLD_VERSION -> $NEW_VERSION"
TYPE_INFO="Type: $VERSION_TYPE"
TAG_INFO="Tag pushed: v${NEW_VERSION}"

# Compute max visible length
LONGEST=0
for L in "$SUMMARY" "$TYPE_INFO" "$TAG_INFO"; do
  vis=$(strip_ansi "$L")
  (( ${#vis} > LONGEST )) && LONGEST=${#vis}
done
WIDTH=$LONGEST
EDGE=$(printf '%*s' $(( WIDTH + 4 )) '' | tr ' ' '─')

print_line() {
  local raw="$1"
  local vis=$(strip_ansi "$raw")
  local pad=$(( WIDTH - ${#vis} ))
  (( pad < 0 )) && pad=0
  printf "│ %s%*s │\n" "$raw" $pad ""
}

echo
# Colorized border + refined inner colors
if [[ -n ${Y:-} ]]; then
  BORDER_COLOR=$Y
else
  BORDER_COLOR=$B
fi
printf "${BORDER_COLOR}┌%s┐${R}\n" "$EDGE"
# Colored summary: label in yellow bold, versions in green, arrow dim
LABEL_COL="${Y}${B}Version bump:${R}"
OLD_COL="${G}v${OLD_VERSION}${R}"
NEW_COL="${G}v${NEW_VERSION}${R}"
ARROW_COL="->"
SUMMARY_COLORED="${LABEL_COL} ${OLD_COL} ${ARROW_COL} ${NEW_COL}"
print_line "$SUMMARY_COLORED"
# Type line: label consistent spacing
print_line "${Y}Type:${R} ${C}${VERSION_TYPE}${R}"
# Tag line
print_line "${Y}Tag pushed:${R} v${NEW_VERSION}"
printf "${BORDER_COLOR}└%s┘${R}\n" "$EDGE"
echo
