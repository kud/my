#!/usr/bin/env zsh

# set colours
autoload colors
if [[ "$terminfo[colors]" -gt 8 ]]; then
  colors
fi

for COLOUR in RED GREEN YELLOW BLUE MAGENTA CYAN BLACK WHITE; do
  eval COLOUR_$COLOUR='$fg_no_bold[${(L)COLOUR}]'
  eval COLOUR_BOLD_$COLOUR='$fg_bold[${(L)COLOUR}]'
done
eval COLOUR_RESET='$reset_color'

# --- Icons/Emoji Constants ---
export CHAR_OK=✔
export CHAR_ERROR=✗
export CHAR_STARTER=❯
export CHAR_INFO="[i]"
export CHAR_USER="[?]"
export CHAR_WARN="[!]"
export CHAR_TASK_START="🚀"
export CHAR_INPUT="[>]"
export CHAR_FINAL_SUCCESS="👍"
export CHAR_FINAL_FAIL="🚫"

# --- Basic Messages ---

function echo_info() { echo "${COLOUR_BLUE}${CHAR_INFO}${COLOUR_RESET} $1" }
function echo_user() { echo "${COLOUR_YELLOW}${CHAR_USER}${COLOUR_RESET} $1" }
function echo_success() { echo "${COLOUR_GREEN}${CHAR_OK}${COLOUR_RESET} $1" }
function echo_fail() { echo "${COLOUR_RED}${CHAR_ERROR}${COLOUR_RESET} $1|n"; exit }
function echo_warn() { echo "${COLOUR_BOLD_YELLOW}${CHAR_WARN}${COLOUR_RESET} $1" }
function echo_task_start() { echo "${COLOUR_CYAN}${CHAR_TASK_START} ${COLOUR_RESET}$1..." }
function echo_task_done() { echo "${COLOUR_GREEN}${CHAR_OK} ${COLOUR_RESET}$1 done!" }
function echo_input() { echo "${COLOUR_BOLD_CYAN}${CHAR_INPUT} ${COLOUR_RESET}$1" }
function echo_final_success() {
    echo "${COLOUR_GREEN}${CHAR_FINAL_SUCCESS} Process completed successfully!${COLOUR_RESET}"
}
function echo_final_fail() {
    echo "${COLOUR_RED}${CHAR_FINAL_FAIL} Process failed!${COLOUR_RESET}"
}

# --- Title Messages ---

function echo_title() { echo "${COLOUR_CYAN}${CHAR_STARTER} $@${COLOUR_RESET}" }
function echo_title_install() { echo_title "Installing" $1"..." }
function echo_title_update() { echo_title "Updating" $1"..." }

# --- Special Formats ---

function echo_bold() { echo "${COLOUR_BOLD_WHITE}$1${COLOUR_RESET}" }
function echo_highlight() { echo "${COLOUR_MAGENTA}$1${COLOUR_RESET}" }
function echo_subtle() { echo "${COLOUR_BLACK}$1${COLOUR_RESET}" }

# --- Spacing ---

function echo_space() {
  printf "\n"
}
function echo_spacex2() {
  echo_space
  echo_space
}
function echo_spacex3() {
  echo_space
  echo_space
  echo_space
}

# --- Separators ---

function echo_hr() {
  echo "${COLOUR_BOLD_CYAN}----------------------------------------${COLOUR_RESET}"
  echo "$1"
  echo "${COLOUR_BOLD_CYAN}----------------------------------------${COLOUR_RESET}"
}

# --- Sugar functions ---

# Cache brew lists for performance (populated by init_brew_cache)
_BREW_FORMULAE_CACHE=""
_BREW_CASKS_CACHE=""
_BREW_OUTDATED_CACHE=""

function init_brew_cache() {
  if command -v brew >/dev/null 2>&1; then
    echo_task_start "Initializing brew cache"
    _BREW_FORMULAE_CACHE=$(brew list --formula 2>/dev/null || echo "")
    _BREW_CASKS_CACHE=$(brew list --cask 2>/dev/null || echo "")
    _BREW_OUTDATED_CACHE=$(brew outdated 2>/dev/null || echo "")
  fi
}

function brewtap() {
  if ! brew tap | grep "${@}" > /dev/null; then
    brew tap "${@}"
  fi
}

function brewinstall() {
  local package="${@}"

  # Check if already installed and up-to-date using cached lists
  if echo "$_BREW_FORMULAE_CACHE" | grep -q "^${package}$" && ! echo "$_BREW_OUTDATED_CACHE" | grep -q "^${package}"; then
    echo_subtle "✓ ${package} (already installed and up-to-date)"
    return 0
  fi

  # Install or upgrade
  if echo "$_BREW_FORMULAE_CACHE" | grep -q "^${package}$"; then
    echo_task_start "Upgrading ${package}"
    brew upgrade "${package}"
    # Update cache after upgrade
    _BREW_OUTDATED_CACHE=$(echo "$_BREW_OUTDATED_CACHE" | grep -v "^${package}")
  else
    echo_task_start "Installing ${package}"
    brew install "${package}"
    # Add to cache after install
    _BREW_FORMULAE_CACHE="${_BREW_FORMULAE_CACHE}${package}\n"
  fi
}

function brewuninstall() {
  brew uninstall "${@}"
}

function caskinstall() {
  local package="${@}"

  # Check if already installed using cached list
  if echo "$_BREW_CASKS_CACHE" | grep -q "^${package}$"; then
    echo_subtle "✓ ${package} (already installed)"
    return 0
  fi

  echo_task_start "Installing ${package}"
  brew install --cask "${package}"
  # Add to cache after install
  _BREW_CASKS_CACHE="${_BREW_CASKS_CACHE}${package}\n"
}

function caskuninstall() {
  brew uninstall --cask "${@}"
}

function geminstall() {
  if ! type "${@}" > /dev/null; then
    gem install "${@}"
  fi
}

function npminstall() {
  local package="${@}"

  # Check if command exists (more reliable than type)
  if command -v "${package}" >/dev/null 2>&1; then
    echo_subtle "✓ ${package} (already installed)"
    return 0
  fi

  echo_task_start "Installing ${package}"
  npm install "${package}" -g --quiet
}

function pip2install() {
  if ! type "${@}" > /dev/null; then
    pip2 install --upgrade "${@}"
  fi
}

function pip3install() {
  if ! type "${@}" > /dev/null; then
    pip3 install --upgrade "${@}"
  fi
}
